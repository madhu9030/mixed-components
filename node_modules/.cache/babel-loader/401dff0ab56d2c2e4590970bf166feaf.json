{"ast":null,"code":"var _jsxFileName = \"/Users/madhusudanreddysanaiahgari/Documents/Todo-App/src/weather/weatherEngine.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport Weather from \"./weather.jsx\";\n\nfunction WeatherEngine(props) {\n  const intialSearch = props.intialSearch;\n  const [search, searchCity] = useState(intialSearch);\n  const [childSearch, childSearchCity] = useState(intialSearch);\n  const [weather, setWeather] = useState({\n    temp: \"\",\n    type: \"\",\n    country: \"\",\n    feelsLike: \"\",\n    city: \"\",\n    id: \"\",\n    error: \"\"\n  }); // get the child Component input search value\n\n  const getChildInputValue = getValue => {\n    childSearchCity(getValue);\n  }; // get data using Promiseses\n\n\n  function updatePromise(e) {\n    //console.log(childSearch)\n    const promise = new Promise((reslove, reject) => {\n      reslove(fetch(`http://api.timezonedb.com/v2.1/get-time-zone?key=P75QOPRLSKVS&format=json&by=zone&zone=America/${childSearch}`).then(response => {\n        return response.json();\n      }).catch(e => e));\n    });\n    promise.then(result => {\n      console.log(result);\n    });\n  }\n\n  {\n    /* Make API call using Promise */\n  }\n\n  const getWeather = async q => {\n    //console.log(isNaN(search))\n    let checkUserValue;\n    const checkCharPattern = /[1-9]/g;\n    const checkNumPattern = /[a-z, A-Z]/gi;\n    const checkPatteren = search.match(checkCharPattern) && search.match(checkNumPattern);\n    console.log(Boolean(checkPatteren));\n\n    if (isNaN(search)) {\n      checkUserValue = `q=${search}`;\n    } else {\n      checkUserValue = `zip=${search}`;\n    }\n\n    const apiRes = await fetch(`http://api.openweathermap.org/data/2.5/weather?${checkUserValue}&units=metric&APPID=e04a7cbcb82de0f319fb66a3e5d643fe`);\n    const resJson = await apiRes.json();\n    return resJson;\n  }; // Update the weather each time user search\n\n\n  const updateweather = search => {\n    getWeather(search).then(res => {\n      console.log(res);\n      return res.main ? setWeather({\n        temp: res.main.temp,\n        type: res.weather[0][\"main\"],\n        country: res.sys.country,\n        feelsLike: res.main.feels_like,\n        city: res.name,\n        id: res.id\n      }) : setWeather({\n        error: res.message\n      });\n    });\n  }; // OnClick of search button this function calls updateweather method and return new data\n\n\n  const handleSearch = event => {\n    event.preventDefault();\n    updateweather(search);\n  }; // It will  execute only onload to update default search\n\n\n  useEffect(() => {\n    updateweather(intialSearch);\n  }, [intialSearch]);\n\n  const inputFocus = e => {\n    if (e.target.value !== \"\") {\n      e.target.classList.value = \"focused\";\n      console.log(e.target.classList);\n    }\n  };\n\n  const id = `search-${Math.random() * 3}`;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: id,\n    onFocus: e => inputFocus(e),\n    type: \"text\",\n    value: search,\n    onChange: e => searchCity(e.target.value),\n    className: search ? \"focused\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, \"Zipcode or City\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => handleSearch(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, \"Search\")), /*#__PURE__*/React.createElement(Weather, {\n    temp: weather.temp,\n    type: weather.type,\n    city: weather.city,\n    country: weather.country,\n    feelsLike: weather.feelsLike,\n    id: weather.id,\n    error: weather.error,\n    childChange: getChildInputValue,\n    clickBack: updatePromise,\n    inputValue: childSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default WeatherEngine;","map":{"version":3,"sources":["/Users/madhusudanreddysanaiahgari/Documents/Todo-App/src/weather/weatherEngine.jsx"],"names":["React","useState","useEffect","Weather","WeatherEngine","props","intialSearch","search","searchCity","childSearch","childSearchCity","weather","setWeather","temp","type","country","feelsLike","city","id","error","getChildInputValue","getValue","updatePromise","e","promise","Promise","reslove","reject","fetch","then","response","json","catch","result","console","log","getWeather","q","checkUserValue","checkCharPattern","checkNumPattern","checkPatteren","match","Boolean","isNaN","apiRes","resJson","updateweather","res","main","sys","feels_like","name","message","handleSearch","event","preventDefault","inputFocus","target","value","classList","Math","random"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Weather from \"./weather.jsx\";\n\nfunction WeatherEngine(props) {\n  const intialSearch = props.intialSearch;\n  const [search, searchCity] = useState(intialSearch);\n  const [childSearch, childSearchCity] = useState(intialSearch);\n  const [weather, setWeather] = useState({\n    temp: \"\",\n    type: \"\",\n    country: \"\",\n    feelsLike: \"\",\n    city: \"\",\n    id: \"\",\n    error: \"\",\n  });\n\n  // get the child Component input search value\n  const getChildInputValue = (getValue) => {\n    childSearchCity(getValue);\n  };\n\n  // get data using Promiseses\n  function updatePromise(e) {\n    //console.log(childSearch)\n    const promise = new Promise((reslove, reject) => {\n      reslove(\n        fetch(\n          `http://api.timezonedb.com/v2.1/get-time-zone?key=P75QOPRLSKVS&format=json&by=zone&zone=America/${childSearch}`\n        )\n          .then((response) => {\n            return response.json();\n          })\n          .catch((e) => e)\n      );\n    });\n    promise.then((result) => {\n      console.log(result);\n    });\n  }\n\n  {\n    /* Make API call using Promise */\n  }\n\n  const getWeather = async (q) => {\n    //console.log(isNaN(search))\n    let checkUserValue;\n    const checkCharPattern = /[1-9]/g;\n    const checkNumPattern = /[a-z, A-Z]/gi;\n    const checkPatteren =\n      search.match(checkCharPattern) && search.match(checkNumPattern);\n    console.log(Boolean(checkPatteren));\n    if (isNaN(search)) {\n      checkUserValue = `q=${search}`;\n    } else {\n      checkUserValue = `zip=${search}`;\n    }\n    const apiRes = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?${checkUserValue}&units=metric&APPID=e04a7cbcb82de0f319fb66a3e5d643fe`\n    );\n    const resJson = await apiRes.json();\n    return resJson;\n  };\n\n  // Update the weather each time user search\n  const updateweather = (search) => {\n    getWeather(search).then((res) => {\n      console.log(res);\n      return res.main\n        ? setWeather({\n            temp: res.main.temp,\n            type: res.weather[0][\"main\"],\n            country: res.sys.country,\n            feelsLike: res.main.feels_like,\n            city: res.name,\n            id: res.id,\n          })\n        : setWeather({\n            error: res.message,\n          });\n    });\n  };\n\n  // OnClick of search button this function calls updateweather method and return new data\n  const handleSearch = (event) => {\n    event.preventDefault();\n    updateweather(search);\n  };\n\n  // It will  execute only onload to update default search\n  useEffect(() => {\n    updateweather(intialSearch);\n  }, [intialSearch]);\n  const inputFocus = (e) => {\n    if (e.target.value !== \"\") {\n      e.target.classList.value = \"focused\";\n      console.log(e.target.classList);\n    }\n  };\n  const id = `search-${Math.random() * 3}`;\n  return (\n    <div>\n      <div className=\"App\">\n        <form className=\"search\">\n          <input\n            id={id}\n            onFocus={(e) => inputFocus(e)}\n            type=\"text\"\n            value={search}\n            onChange={(e) => searchCity(e.target.value)}\n            className={search ? \"focused\" : \"\"}\n          />\n          <label htmlFor={id}>Zipcode or City</label>\n          <button onClick={(e) => handleSearch(e)}>Search</button>\n        </form>\n        <Weather\n          temp={weather.temp}\n          type={weather.type}\n          city={weather.city}\n          country={weather.country}\n          feelsLike={weather.feelsLike}\n          id={weather.id}\n          error={weather.error}\n          childChange={getChildInputValue}\n          clickBack={updatePromise}\n          inputValue={childSearch}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default WeatherEngine;\n"]},"metadata":{},"sourceType":"module"}